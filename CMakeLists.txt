#
# Cmake configuration file
#

############################# INITIAL SECTION ##########################
CMAKE_MINIMUM_REQUIRED(VERSION 3.1 FATAL_ERROR)

PROJECT(minipro C)

SET(PACKAGE_VERSION_MAJOR	1)
SET(PACKAGE_VERSION_MINOR	2)
SET(PACKAGE_VERSION_PATCH	0)

SET(PACKAGE_NAME		"${PROJECT_NAME}")
SET(PACKAGE_VERSION		"${PACKAGE_VERSION_MAJOR}.${PACKAGE_VERSION_MINOR}.${PACKAGE_VERSION_PATCH}")
SET(PACKAGE_URL			"https://github.com/rozhuk-im/minipro")
SET(PACKAGE_BUGREPORT		"https://github.com/rozhuk-im/minipro")
SET(PACKAGE_STRING 		"${PACKAGE_NAME} ${PACKAGE_VERSION}")
SET(PACKAGE_DESCRIPTION		"A free and open TL866XX programmer")
SET(PACKAGE_TARNAME		"${PACKAGE_NAME}-${PACKAGE_VERSION}")

############################# OPTIONS SECTION ##########################

OPTION(ENABLE_OPTIMIZATION	"Enable extra optimizations [default: OFF]"		OFF)
OPTION(ENABLE_COVERAGE		"Build with code coverage options [default: OFF]"	OFF)
OPTION(ENABLE_FULL_DEBUG	"Build with all possible debug [default: OFF]"		OFF)

# Now CMAKE_INSTALL_PREFIX is a base prefix for everything
IF(NOT SHARE_DIR)
	SET(SHARE_DIR "${CMAKE_INSTALL_PREFIX}/share/minipro")
ENDIF()

############################# INCLUDE SECTION ##########################

INCLUDE(CheckFunctionExists)
INCLUDE(CheckCCompilerFlag)

FIND_PACKAGE(PkgConfig REQUIRED)
PKG_SEARCH_MODULE(LIBUSB1 REQUIRED libusb-1.0)
INCLUDE_DIRECTORIES(SYSTEM ${LIBUSB1_INCLUDE_DIRS})
LIST(APPEND CMAKE_REQUIRED_LIBRARIES ${LIBUSB1_LIBRARIES})

############################# MACRO SECTION ############################


############################# CONFIG SECTION ###########################

# Prefer local include dirs to system ones.
INCLUDE_DIRECTORIES("${CMAKE_CURRENT_SOURCE_DIR}/"
		"${CMAKE_CURRENT_SOURCE_DIR}/src"
		"${CMAKE_CURRENT_SOURCE_DIR}/src/liblcb/include"
		"${CMAKE_BINARY_DIR}/src")

SET(TAR "tar")

# Platform specific configuration.
IF(CMAKE_SYSTEM_NAME MATCHES "^.*BSD$|DragonFly")
	ADD_DEFINITIONS(-DFREEBSD -D_BSD_SOURCE)
	MESSAGE(STATUS "Configuring for BSD system")
	SET(TAR "gtar")
ENDIF()

IF(CMAKE_SYSTEM_NAME STREQUAL "Darwin")
	SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -D_BSD_SOURCE -DDARWIN")
	MESSAGE(STATUS "Configuring for Darwin")
	SET(TAR "gnutar")
	SET(CMAKE_FIND_FRAMEWORK "NEVER")
ENDIF()


IF(CMAKE_SYSTEM_NAME STREQUAL "Linux")
	SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -D_GNU_SOURCE -D__USE_GNU=1")
	ADD_DEFINITIONS(-D_GNU_SOURCE -DLINUX)
	ADD_DEFINITIONS(-D__USE_GNU=1)
	IF(BUILD_CPU_MODE STREQUAL "32")
		ADD_DEFINITIONS(-D_FILE_OFFSET_BITS=64 -D_LARGEFILE64_SOURCE)
	ENDIF()

	LIST(APPEND CMAKE_REQUIRED_LIBRARIES rt)
ENDIF()


# Process with warn flags.
SET(CMAKE_C_WARN_FLAGS "")
IF(NOT CMAKE_C_OPT_FLAGS AND ENABLE_FULL_DEBUG)
	CHECK_C_COMPILER_FLAG(-W			SUPPORT_W)
	CHECK_C_COMPILER_FLAG(-Wall			SUPPORT_WALL)
	CHECK_C_COMPILER_FLAG(-Wpointer-arith		SUPPORT_WPOINTER)
	CHECK_C_COMPILER_FLAG(-Wno-unused-parameter	SUPPORT_WPARAM)
	CHECK_C_COMPILER_FLAG(-Wno-unused-function	SUPPORT_WFUNCTION)
	CHECK_C_COMPILER_FLAG(-Wunused-variable		SUPPORT_WUNUSED_VAR)
	CHECK_C_COMPILER_FLAG(-Wno-pointer-sign		SUPPORT_WPOINTER_SIGN)
	CHECK_C_COMPILER_FLAG(-Wno-sign-compare		SUPPORT_WSIGN_COMPARE)
	CHECK_C_COMPILER_FLAG(-Wstrict-prototypes	SUPPORT_WSTRICT_PROTOTYPES)
	CHECK_C_COMPILER_FLAG(-pedantic			SUPPORT_PEDANTIC_FLAG)
	CHECK_C_COMPILER_FLAG(-Wno-unused-const-variable SUPPORT_WNO_UNUSED_CONST)
	# GCC 6 specific.
	CHECK_C_COMPILER_FLAG(-Wnull-dereference	SUPPORT_WNULL_DEREFERENCE)
	CHECK_C_COMPILER_FLAG(-Wduplicated-cond		SUPPORT_WDUPLICATED_COND)
	# GCC 7 specific.
	CHECK_C_COMPILER_FLAG(-Wimplicit-fallthrough	SUPPORT_WIMPLICIT_FALLTHROUGH)

	IF(SUPPORT_W)
		SET(CMAKE_C_WARN_FLAGS "${CMAKE_C_WARN_FLAGS} -W")
	ENDIF()
	IF(SUPPORT_WALL)
		SET(CMAKE_C_WARN_FLAGS "${CMAKE_C_WARN_FLAGS} -Wall")
	ENDIF()
	IF(SUPPORT_WPOINTER)
		SET(CMAKE_C_WARN_FLAGS "${CMAKE_C_WARN_FLAGS} -Wpointer-arith")
	ENDIF()
	IF(SUPPORT_WPARAM)
		SET(CMAKE_C_WARN_FLAGS "${CMAKE_C_WARN_FLAGS} -Wno-unused-parameter")
	ENDIF()
	IF(SUPPORT_WFUNCTION)
		SET(CMAKE_C_WARN_FLAGS "${CMAKE_C_WARN_FLAGS} -Wno-unused-function")
	ENDIF()
	IF(SUPPORT_WUNUSED_VAR)
		SET(CMAKE_C_WARN_FLAGS "${CMAKE_C_WARN_FLAGS} -Wunused-variable")
	ENDIF()
	IF(SUPPORT_WPOINTER_SIGN)
		SET(CMAKE_C_WARN_FLAGS "${CMAKE_C_WARN_FLAGS} -Wno-pointer-sign")
	ENDIF()
	IF(SUPPORT_WSTRICT_PROTOTYPES)
		SET(CMAKE_C_WARN_FLAGS "${CMAKE_C_WARN_FLAGS} -Wstrict-prototypes")
	ENDIF()
	IF(SUPPORT_PEDANTIC_FLAG)
		SET(CMAKE_C_WARN_FLAGS "${CMAKE_C_WARN_FLAGS} -pedantic")
	ENDIF()
	IF(SUPPORT_WNULL_DEREFERENCE)
		SET(CMAKE_C_WARN_FLAGS "${CMAKE_C_WARN_FLAGS} -Wnull-dereference")
	ENDIF()
	IF(SUPPORT_WDUPLICATED_COND)
		SET(CMAKE_C_WARN_FLAGS "${CMAKE_C_WARN_FLAGS} -Wduplicated-cond")
	ENDIF()
	IF(SUPPORT_WLOGICAL_OP)
		SET(CMAKE_C_WARN_FLAGS "${CMAKE_C_WARN_FLAGS} -Wlogical-op")
	ENDIF()
	IF(SUPPORT_WNO_UNUSED_CONST)
		SET(CMAKE_C_WARN_FLAGS "${CMAKE_C_WARN_FLAGS} -Wno-unused-const-variable")
	ENDIF()
	IF(SUPPORT_WSIGN_COMPARE)
		SET(CMAKE_C_WARN_FLAGS "${CMAKE_C_WARN_FLAGS} -Wno-sign-compare")
	ENDIF()
	IF(SUPPORT_WIMPLICIT_FALLTHROUGH)
		SET(CMAKE_C_WARN_FLAGS "${CMAKE_C_WARN_FLAGS} -Wno-implicit-fallthrough")
	ENDIF()
ENDIF()

IF(NOT "${CMAKE_C_COMPILER_ID}" MATCHES SunPro)
	CHECK_C_COMPILER_FLAG("-std=c11"	SUPPORT_STD11_FLAG)
	IF(SUPPORT_STD11_FLAG)
		SET(CMAKE_C_WARN_FLAGS "${CMAKE_C_WARN_FLAGS} -std=c11")
	ELSE()
		CHECK_C_COMPILER_FLAG("-std=c99"	SUPPORT_STD99_FLAG)
		IF(SUPPORT_STD99_FLAG)
			SET(CMAKE_C_WARN_FLAGS "${CMAKE_C_WARN_FLAGS} -std=c99")
		ENDIF()
	ENDIF()
ENDIF()

CHECK_C_COMPILER_FLAG(-fPIC			SUPPORT_FPIC)
IF(SUPPORT_FPIC)
	SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fPIC")
ENDIF()

# Optimization flags
IF(NOT CMAKE_C_OPT_FLAGS)
	IF(ENABLE_FULL_DEBUG)
		SET(CMAKE_C_OPT_FLAGS "-g -O0 -fstrict-aliasing")
	ELSE()
		SET(CMAKE_C_OPT_FLAGS "-g -O2 -fstrict-aliasing")
	ENDIF()
ENDIF()

IF(ENABLE_COVERAGE)
	SET(CMAKE_C_OPT_FLAGS "-g -O0 -fno-strict-aliasing")
	SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} --coverage")
	SET(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} --coverage")
ENDIF()

SET(CMAKE_C_FLAGS "${CMAKE_C_OPT_FLAGS} ${CMAKE_C_FLAGS} ${CMAKE_C_WARN_FLAGS}")

# Check platform API.
CHECK_FUNCTION_EXISTS(memrchr			HAVE_MEMRCHR)
CHECK_FUNCTION_EXISTS(memmem			HAVE_MEMMEM)
CHECK_FUNCTION_EXISTS(strncasecmp		HAVE_STRNCASECMP)
CHECK_FUNCTION_EXISTS(reallocarray		HAVE_REALLOCARRAY)

CONFIGURE_FILE(config.h.cmake src/config.h)
ADD_DEFINITIONS(-DHAVE_CONFIG_H)

################################ SUBDIRS SECTION #######################

ADD_SUBDIRECTORY(src)

############################ TARGETS SECTION ###########################

ADD_CUSTOM_TARGET(dist ${CMAKE_SOURCE_DIR}/dist.sh
	"${CMAKE_BINARY_DIR}/minipro-${MINIPRO_VERSION}.tar.xz" "${TAR}"
	COMMENT "Create source distribution"
	WORKING_DIRECTORY ${CMAKE_SOURCE_DIR})

##################### INSTALLATION #####################################

# Text files
INSTALL(FILES "minipro_db.ini" DESTINATION ${SHARE_DIR})
INSTALL(FILES "README.md" DESTINATION ${SHARE_DIR})
